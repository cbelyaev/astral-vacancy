/* 
 * Vacancy API
 *
 * Web API for AstralVacancy task project.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Модель фильтрации пользователей
    /// </summary>
    [DataContract]
    public partial class UserFilterDto :  IEquatable<UserFilterDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserFilterDto" /> class.
        /// </summary>
        /// <param name="LoginFilter">Подстрока для фильтрации по логину.</param>
        /// <param name="FullNameFilter">Подстрока для фильтрации по полному имени.</param>
        /// <param name="IsAdminFilter">Фильтрация только админов или только простых пользователей.</param>
        public UserFilterDto(string LoginFilter = default(string), string FullNameFilter = default(string), bool? IsAdminFilter = default(bool?))
        {
            this.LoginFilter = LoginFilter;
            this.FullNameFilter = FullNameFilter;
            this.IsAdminFilter = IsAdminFilter;
        }
        
        /// <summary>
        /// Подстрока для фильтрации по логину
        /// </summary>
        /// <value>Подстрока для фильтрации по логину</value>
        [DataMember(Name="loginFilter", EmitDefaultValue=false)]
        public string LoginFilter { get; set; }

        /// <summary>
        /// Подстрока для фильтрации по полному имени
        /// </summary>
        /// <value>Подстрока для фильтрации по полному имени</value>
        [DataMember(Name="fullNameFilter", EmitDefaultValue=false)]
        public string FullNameFilter { get; set; }

        /// <summary>
        /// Фильтрация только админов или только простых пользователей
        /// </summary>
        /// <value>Фильтрация только админов или только простых пользователей</value>
        [DataMember(Name="isAdminFilter", EmitDefaultValue=false)]
        public bool? IsAdminFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserFilterDto {\n");
            sb.Append("  LoginFilter: ").Append(LoginFilter).Append("\n");
            sb.Append("  FullNameFilter: ").Append(FullNameFilter).Append("\n");
            sb.Append("  IsAdminFilter: ").Append(IsAdminFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserFilterDto);
        }

        /// <summary>
        /// Returns true if UserFilterDto instances are equal
        /// </summary>
        /// <param name="input">Instance of UserFilterDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserFilterDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LoginFilter == input.LoginFilter ||
                    (this.LoginFilter != null &&
                    this.LoginFilter.Equals(input.LoginFilter))
                ) && 
                (
                    this.FullNameFilter == input.FullNameFilter ||
                    (this.FullNameFilter != null &&
                    this.FullNameFilter.Equals(input.FullNameFilter))
                ) && 
                (
                    this.IsAdminFilter == input.IsAdminFilter ||
                    (this.IsAdminFilter != null &&
                    this.IsAdminFilter.Equals(input.IsAdminFilter))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LoginFilter != null)
                    hashCode = hashCode * 59 + this.LoginFilter.GetHashCode();
                if (this.FullNameFilter != null)
                    hashCode = hashCode * 59 + this.FullNameFilter.GetHashCode();
                if (this.IsAdminFilter != null)
                    hashCode = hashCode * 59 + this.IsAdminFilter.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
