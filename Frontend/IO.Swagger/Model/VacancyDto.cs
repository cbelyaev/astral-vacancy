/* 
 * Vacancy API
 *
 * Web API for AstralVacancy task project.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VacancyDto
    /// </summary>
    [DataContract]
    public partial class VacancyDto :  IEquatable<VacancyDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VacancyDto" /> class.
        /// </summary>
        /// <param name="Id">Идентификатор вакансии.</param>
        /// <param name="SyncId">Идентификатор вакансии на hh.ru.</param>
        /// <param name="Name">Название вакансии.</param>
        /// <param name="Description">Описание вакансии, содержит html.</param>
        /// <param name="Salary">Оклад.</param>
        /// <param name="EmployerName">Работодатель.</param>
        /// <param name="Published">Дата публикации вакансии.</param>
        public VacancyDto(int? Id = default(int?), string SyncId = default(string), string Name = default(string), string Description = default(string), SalaryDto Salary = default(SalaryDto), string EmployerName = default(string), DateTime? Published = default(DateTime?))
        {
            this.Id = Id;
            this.SyncId = SyncId;
            this.Name = Name;
            this.Description = Description;
            this.Salary = Salary;
            this.EmployerName = EmployerName;
            this.Published = Published;
        }
        
        /// <summary>
        /// Идентификатор вакансии
        /// </summary>
        /// <value>Идентификатор вакансии</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Идентификатор вакансии на hh.ru
        /// </summary>
        /// <value>Идентификатор вакансии на hh.ru</value>
        [DataMember(Name="syncId", EmitDefaultValue=false)]
        public string SyncId { get; set; }

        /// <summary>
        /// Название вакансии
        /// </summary>
        /// <value>Название вакансии</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Описание вакансии, содержит html
        /// </summary>
        /// <value>Описание вакансии, содержит html</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Оклад
        /// </summary>
        /// <value>Оклад</value>
        [DataMember(Name="salary", EmitDefaultValue=false)]
        public SalaryDto Salary { get; set; }

        /// <summary>
        /// Работодатель
        /// </summary>
        /// <value>Работодатель</value>
        [DataMember(Name="employerName", EmitDefaultValue=false)]
        public string EmployerName { get; set; }

        /// <summary>
        /// Дата публикации вакансии
        /// </summary>
        /// <value>Дата публикации вакансии</value>
        [DataMember(Name="published", EmitDefaultValue=false)]
        public DateTime? Published { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VacancyDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SyncId: ").Append(SyncId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Salary: ").Append(Salary).Append("\n");
            sb.Append("  EmployerName: ").Append(EmployerName).Append("\n");
            sb.Append("  Published: ").Append(Published).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VacancyDto);
        }

        /// <summary>
        /// Returns true if VacancyDto instances are equal
        /// </summary>
        /// <param name="input">Instance of VacancyDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VacancyDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SyncId == input.SyncId ||
                    (this.SyncId != null &&
                    this.SyncId.Equals(input.SyncId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Salary == input.Salary ||
                    (this.Salary != null &&
                    this.Salary.Equals(input.Salary))
                ) && 
                (
                    this.EmployerName == input.EmployerName ||
                    (this.EmployerName != null &&
                    this.EmployerName.Equals(input.EmployerName))
                ) && 
                (
                    this.Published == input.Published ||
                    (this.Published != null &&
                    this.Published.Equals(input.Published))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SyncId != null)
                    hashCode = hashCode * 59 + this.SyncId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Salary != null)
                    hashCode = hashCode * 59 + this.Salary.GetHashCode();
                if (this.EmployerName != null)
                    hashCode = hashCode * 59 + this.EmployerName.GetHashCode();
                if (this.Published != null)
                    hashCode = hashCode * 59 + this.Published.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
