/* 
 * Vacancy API
 *
 * Web API for AstralVacancy task project.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Оклад
    /// </summary>
    [DataContract]
    public partial class SalaryDto :  IEquatable<SalaryDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SalaryDto" /> class.
        /// </summary>
        /// <param name="From">Нижняя граница вилки оклада.</param>
        /// <param name="To">Верняя граница вилки оклада.</param>
        /// <param name="Gross">Признак того что оклад указан до вычета налогов. В случае если не указано - null..</param>
        /// <param name="Currency">Валюта оклада.</param>
        public SalaryDto(double? From = default(double?), double? To = default(double?), bool? Gross = default(bool?), string Currency = default(string))
        {
            this.From = From;
            this.To = To;
            this.Gross = Gross;
            this.Currency = Currency;
        }
        
        /// <summary>
        /// Нижняя граница вилки оклада
        /// </summary>
        /// <value>Нижняя граница вилки оклада</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public double? From { get; set; }

        /// <summary>
        /// Верняя граница вилки оклада
        /// </summary>
        /// <value>Верняя граница вилки оклада</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public double? To { get; set; }

        /// <summary>
        /// Признак того что оклад указан до вычета налогов. В случае если не указано - null.
        /// </summary>
        /// <value>Признак того что оклад указан до вычета налогов. В случае если не указано - null.</value>
        [DataMember(Name="gross", EmitDefaultValue=false)]
        public bool? Gross { get; set; }

        /// <summary>
        /// Валюта оклада
        /// </summary>
        /// <value>Валюта оклада</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalaryDto {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Gross: ").Append(Gross).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SalaryDto);
        }

        /// <summary>
        /// Returns true if SalaryDto instances are equal
        /// </summary>
        /// <param name="input">Instance of SalaryDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalaryDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Gross == input.Gross ||
                    (this.Gross != null &&
                    this.Gross.Equals(input.Gross))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Gross != null)
                    hashCode = hashCode * 59 + this.Gross.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
